% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/copy_file.r
\name{copy_file}
\alias{copy_file}
\title{Copy individual file(s)}
\usage{
copy_file(
  from,
  to_fn = NULL,
  to_dir = NULL,
  keep_relative_path_from = NULL,
  make_final_adjustment = NULL,
  return_relative_path_from = NULL,
  overwrite = FALSE,
  ...
)
}
\arguments{
\item{from}{character vector.
Paths to files that need to be copied.}

\item{to_fn}{character vector.
Paths that files need to be copied to.
Must be supplied if \code{to_dir} is missing.
If supplied, then \code{to_dir},
\code{keep_structure_relative_to_dir} and
\code{make_final_adjustment} are ignored.}

\item{to_dir}{character.
Directory to copy files in \code{from} to.
Must be supplied if \code{to_fn} is missing.}

\item{keep_relative_path_from}{character.
If specified, then the relative path to the file
from \code{to_dir} will be the same
as the relative path to the file
from \code{keep_structure_relative_to_dir}.
For example, if the \code{from} is
\code{\home\usr\folder1\folder2\folder3\plot.png} and
\code{to_dir} is \code{\home\usr\newfolder1}, then
without specifying
\code{keep_relative_path_from}
the final path coped to will be
\code{\home\usr\newfolder1\plot.png}.
However, if \code{keep_relative_path_from}
is \code{\home\usr\folder1},
then the file will be copied to will be
\code{\home\usr\newfolder1\folder2\folder3\plot.png}.
A frequently-useful option is \code{here::here()} (or \code{getwd()}).
Default is \code{NULL}.}

\item{make_final_adjustment}{function.
Function applied to path immediately before copying
(if \code{to_fn} was not specified).
Must accept a character vector of length 1 as input,
and return a character vector of length 1 as output.
Default is \code{NULL}.}

\item{return_relative_path_from}{character.
Functions similarly to \code{keep_relative_path_from},
except that it modifies the path returned by \code{copy_file}.
By default \code{copy_file} returns the absolute path the
object was copied to.
By specifying \code{return_relative_path_from}, one
may obtain a relative path instead.
Again, frequently-useful option is
\code{here::here()} (or \code{getwd()}) (especially for
passing relative paths to \code{knitr::include_graphics}
when using \code{bookdown}).
Default is \code{NULL}.}

\item{overwrite}{logical.
If \code{FALSE}, then any existing file at the final
destination will be overwritten.
Default is \code{FALSE}.}

\item{...}{Passed to `file.copy`.}
}
\value{
Invisibly returns the final path copied to.
Useful for then displaying the file contents.
}
\description{
Copy individual files across
to destinations whose exact value may be calculated
based on certain parameters.
Note that unlike \code{base::file.copy},
this is only for individual files and not whole directories.
To copy directories, use \code{copy_dir}.
}
\examples{

# setup
 dir_test <- file.path(tempdir(), "copy_file")
 from <- file.path(dir_test, "folder1", "folder2", "folder3", "silly.txt")
 if (!dir.exists(dirname(from))) dir.create(dirname(from), recursive = TRUE)
 file.create(from)

 # show straightforward to_fn
 # --------------------
 copy_file(
   from = from,
   to_fn = file.path(dir_test, "testToFn", "sillier.txt")
 )
 file.exists(file.path(dir_test, "testToFn", "sillier.txt"))

 # show straightforward to_dit
 # --------------------
 copy_file(
   from = from,
   to_dir = file.path(dir_test, "testToDir")
 )
 file.exists(file.path(dir_test, "testToDir", "silly.txt"))

 # show keep_relative_path_from
 # --------------------
 copy_file(
   from = from,
   to_dir = file.path(dir_test, "testToDir"),
   keep_relative_path_from = file.path(dir_test, "folder1")
 )
 file.exists(
   file.path(dir_test, "testToDir", "folder2", "folder3", "silly.txt")
 )

 # show make_final_adjustment
 # --------------------
 copy_file(
   from = from,
   to_dir = file.path(dir_test, "testToDir"),
   keep_relative_path_from = file.path(dir_test, "folder1"),
   make_final_adjustment = function(x) {
     gsub("folder3", "YABADOO", x)
   }
 )

 file.exists(
   file.path(dir_test, "testToDir", "folder2", "YABADOO", "silly.txt")
 )

 # show return_relative_path_from
 # --------------------
 path_abs <- copy_file(
   from = from,
   to_dir = file.path(dir_test, "testToDir"),
   keep_relative_path_from = file.path(dir_test, "folder1"),
   make_final_adjustment = function(x) {
     gsub("folder3", "YABADOO", x)
   }
 )
 path_abs

 path_rel <- copy_file(
   from = from,
   to_dir = file.path(dir_test, "testToDir"),
   keep_relative_path_from = file.path(dir_test, "folder1"),
   make_final_adjustment = function(x) {
     gsub("folder3", "YABADOO", x)
   },
   return_relative_path_from = file.path(dir_test, "testToDir")
 )
 path_rel
}
